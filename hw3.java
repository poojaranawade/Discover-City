/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw3;

import dbPackage.javaConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pooja.ranawade
 */
public class hw3 extends javax.swing.JFrame {

    Connection conn = javaConnection.connectionDB();
    PreparedStatement pst = null;
    ResultSet rs = null;
    JList main_cat = new JList();
    JList sub_cat = new JList();
    JList attr = new JList();
    JList res_list = new JList();
    DefaultTableModel tableModel = new DefaultTableModel();
    JTable table;
    static ArrayList<String> businessID = new ArrayList<>();

    /**
     * Creates new form hw3
     *
     * @throws java.sql.SQLException
     */
    public hw3() throws SQLException {
        initComponents();
        dayChoice.add("Select");
        dayChoice.add("Monday");
        dayChoice.add("Tuesday");
        dayChoice.add("Wednesday");
        dayChoice.add("Thursday");
        dayChoice.add("Friday");
        dayChoice.add("Saturday");
        dayChoice.add("Sunday");

        andOrChoice.add("AND");
        andOrChoice.add("OR");

        fromChoice.add("Select");
        int diff = 1;
        for (int i = 2; i < 49; i++) {
            if (i % 2 == 0) {
                int current = i - diff;
                fromChoice.add(current + "");
                diff++;
            } else {
                int current = i - diff;
                fromChoice.add(current + ".30");
            }
        }

        toChoice.add("Select");
        diff = 1;
        for (int i = 2; i < 49; i++) {
            if (i % 2 == 0) {
                int current = i - diff;
                toChoice.add(current + "");
                diff++;
            } else {
                int current = i - diff;
                toChoice.add(current + ".30");
            }
        }
        subCatPanel.setVisible(false);
        subCatLabel.setVisible(false);

        attrPanel.setVisible(false);
        attrLabel.setVisible(false);

        resPanel.setVisible(false);
        resLabel.setVisible(false);

        ArrayList<String> main_cat_list = main_category();
        main_cat.setModel(new AbstractListModel() {
            String[] values = (String[]) main_cat_list.toArray(new String[main_cat_list.size()]);

            @Override
            public int getSize() {
                return values.length;
            }

            @Override
            public Object getElementAt(int index) {
                return values[index];
            }
        });
        main_cat.setBounds(165, 48, -100, 600);
        JScrollPane main_cat_scp = new JScrollPane(main_cat);
        main_cat_scp.setSize(200, 500);
        main_cat_scp.setLocation(5, 10);
        secondPanel.add(main_cat_scp);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        facetPanel = new javax.swing.JPanel();
        subCatPanel = new javax.swing.JPanel();
        subCatSearchLabel = new javax.swing.JLabel();
        subCatSearch = new javax.swing.JButton();
        attrPanel = new javax.swing.JPanel();
        secondPanel = new javax.swing.JPanel();
        mainCatSearchLabel = new javax.swing.JLabel();
        mainCatSearch = new javax.swing.JButton();
        mainCatLabel = new javax.swing.JLabel();
        subCatLabel = new javax.swing.JLabel();
        attrLabel = new javax.swing.JLabel();
        dayChoice = new java.awt.Choice();
        fromChoice = new java.awt.Choice();
        toChoice = new java.awt.Choice();
        attrSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        andOrChoice = new java.awt.Choice();
        resetButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        resLabel = new javax.swing.JLabel();
        resPanel = new javax.swing.JPanel();
        businessSearch = new javax.swing.JButton();
        businessSearchLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        subCatPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        subCatSearchLabel.setText("Sub Category Selected");

        subCatSearch.setText("Search");
        subCatSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subCatSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subCatPanelLayout = new javax.swing.GroupLayout(subCatPanel);
        subCatPanel.setLayout(subCatPanelLayout);
        subCatPanelLayout.setHorizontalGroup(
            subCatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subCatPanelLayout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(subCatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subCatSearchLabel)
                    .addGroup(subCatPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(subCatSearch)))
                .addGap(43, 43, 43))
        );
        subCatPanelLayout.setVerticalGroup(
            subCatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subCatPanelLayout.createSequentialGroup()
                .addContainerGap(511, Short.MAX_VALUE)
                .addComponent(subCatSearchLabel)
                .addGap(6, 6, 6)
                .addComponent(subCatSearch)
                .addContainerGap())
        );

        attrPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout attrPanelLayout = new javax.swing.GroupLayout(attrPanel);
        attrPanel.setLayout(attrPanelLayout);
        attrPanelLayout.setHorizontalGroup(
            attrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );
        attrPanelLayout.setVerticalGroup(
            attrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 571, Short.MAX_VALUE)
        );

        secondPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        mainCatSearchLabel.setText("Main Category Selected");

        mainCatSearch.setText("Search");
        mainCatSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainCatSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout secondPanelLayout = new javax.swing.GroupLayout(secondPanel);
        secondPanel.setLayout(secondPanelLayout);
        secondPanelLayout.setHorizontalGroup(
            secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainCatSearchLabel)
                    .addGroup(secondPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(mainCatSearch)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        secondPanelLayout.setVerticalGroup(
            secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                .addContainerGap(511, Short.MAX_VALUE)
                .addComponent(mainCatSearchLabel)
                .addGap(6, 6, 6)
                .addComponent(mainCatSearch)
                .addContainerGap())
        );

        mainCatLabel.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        mainCatLabel.setText("Main Category");

        subCatLabel.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        subCatLabel.setText("Sub Category");

        attrLabel.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        attrLabel.setText("Attributes");

        attrSearch.setText("Search");
        attrSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Day of week");

        jLabel2.setText("From:");

        jLabel3.setText("To:");

        resetButton.setText("Close");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout facetPanelLayout = new javax.swing.GroupLayout(facetPanel);
        facetPanel.setLayout(facetPanelLayout);
        facetPanelLayout.setHorizontalGroup(
            facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facetPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(mainCatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(subCatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(attrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addGroup(facetPanelLayout.createSequentialGroup()
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(facetPanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addGap(108, 108, 108)
                        .addComponent(jLabel2)
                        .addGap(250, 250, 250)
                        .addComponent(jLabel3))
                    .addGroup(facetPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(secondPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(subCatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(attrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(facetPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(facetPanelLayout.createSequentialGroup()
                        .addComponent(dayChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(fromChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(facetPanelLayout.createSequentialGroup()
                        .addComponent(andOrChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(attrSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton)
                        .addGap(72, 72, 72))))
        );

        facetPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {attrPanel, secondPanel, subCatPanel});

        facetPanelLayout.setVerticalGroup(
            facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, facetPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainCatLabel)
                    .addComponent(subCatLabel)
                    .addComponent(attrLabel))
                .addGap(18, 18, 18)
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(secondPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attrPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subCatPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dayChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(andOrChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(facetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(attrSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(resetButton)))
                .addGap(194, 194, 194))
        );

        facetPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {attrPanel, secondPanel, subCatPanel});

        resLabel.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        resLabel.setText("Result Businesses");

        resPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        businessSearch.setText("Search");
        businessSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                businessSearchActionPerformed(evt);
            }
        });

        businessSearchLabel.setText("Business Selected");

        javax.swing.GroupLayout resPanelLayout = new javax.swing.GroupLayout(resPanel);
        resPanel.setLayout(resPanelLayout);
        resPanelLayout.setHorizontalGroup(
            resPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resPanelLayout.createSequentialGroup()
                .addGap(374, 374, 374)
                .addComponent(businessSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(344, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(businessSearchLabel)
                .addGap(374, 374, 374))
        );
        resPanelLayout.setVerticalGroup(
            resPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resPanelLayout.createSequentialGroup()
                .addContainerGap(609, Short.MAX_VALUE)
                .addComponent(businessSearchLabel)
                .addGap(18, 18, 18)
                .addComponent(businessSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(resLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(resPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resLabel)
                .addGap(18, 18, 18)
                .addComponent(resPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(facetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 783, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainCatSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainCatSearchActionPerformed
        // TODO add your handling code here:
        List<String> main_cat_select = main_cat.getSelectedValuesList();
        ArrayList<String> sub_cat_list;
        String condition = andOrChoice.getSelectedItem().toString();
        try {
            sub_cat_list = sub_category(main_cat_select, condition);
            sub_cat.setModel(new AbstractListModel() {
                String[] values = (String[]) sub_cat_list.toArray(new String[sub_cat_list.size()]);

                @Override
                public int getSize() {
                    return values.length;
                }

                @Override
                public Object getElementAt(int index) {
                    return values[index];
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }

        sub_cat.setBounds(234, 32, 500, 239);
        JScrollPane sub_cat_scp = new JScrollPane(sub_cat);
        sub_cat_scp.setSize(200, 500);
        sub_cat_scp.setLocation(5, 10);
        sub_cat_scp.revalidate();
        subCatPanel.add(sub_cat_scp);
        subCatPanel.setVisible(true);
        subCatLabel.setVisible(true);
    }//GEN-LAST:event_mainCatSearchActionPerformed

    private void subCatSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subCatSearchActionPerformed
        // TODO add your handling code here:
        List<String> main_cat_select = main_cat.getSelectedValuesList();
        List<String> sub_cat_list = sub_cat.getSelectedValuesList();
        List<String> concate = new ArrayList<>(main_cat_select);
        concate.addAll(sub_cat_list);
        ArrayList<String> attr_list;
        String condition = andOrChoice.getSelectedItem().toString();
        try {
            attr_list = attribute_search(main_cat_select, sub_cat_list, condition);
            attr.setModel(new AbstractListModel() {
                String[] values = (String[]) attr_list.toArray(new String[attr_list.size()]);

                @Override
                public int getSize() {
                    return values.length;
                }

                @Override
                public Object getElementAt(int index) {
                    return values[index];
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
        attr.setBounds(234, 32, 169, 239);
        JScrollPane attr_scp = new JScrollPane(attr);
        attr_scp.setSize(200, 500);
        attr_scp.setLocation(5, 10);
        attr_scp.revalidate();
        attrPanel.add(attr_scp);
        attrPanel.setVisible(true);
        attrLabel.setVisible(true);
    }//GEN-LAST:event_subCatSearchActionPerformed

    private void attrSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrSearchActionPerformed
        // TODO add your handling code here:
        List<String> main_cat_select = main_cat.getSelectedValuesList();
        List<String> sub_cat_list = sub_cat.getSelectedValuesList();
        List<String> attr_list = attr.getSelectedValuesList();

        List<String> concate = new ArrayList<>(main_cat_select);
        concate.addAll(sub_cat_list);
        concate.addAll(attr_list);

        ArrayList<String> b_result_list;
        String condition = andOrChoice.getSelectedItem().toString();
        try {
            b_result_list = business_search(main_cat_select, sub_cat_list, attr_list, condition);
            res_list.setModel(new AbstractListModel() {
                String[] values = (String[]) b_result_list.toArray(new String[b_result_list.size()]);

                @Override
                public int getSize() {
                    return values.length;
                }

                @Override
                public Object getElementAt(int index) {
                    return values[index];
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
        res_list.setBounds(234, 32, 169, 239);
        table = new JTable(tableModel);
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(250);
        JScrollPane res_scp = new JScrollPane(table);
        res_scp.setSize(800, 500);
        res_scp.setLocation(5, 10);
        res_scp.revalidate();
        resPanel.add(res_scp);
        resPanel.setVisible(true);
        resLabel.setVisible(true);
    }//GEN-LAST:event_attrSearchActionPerformed

    private void businessSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_businessSearchActionPerformed
        // TODO add your handling code here:
        int business_int = table.getSelectedRow();
        if (!table.getSelectionModel().isSelectionEmpty()) {
            String business_name = (String) table.getModel().getValueAt(business_int, 0);
            reviews review = new reviews(business_name);
            review.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(facetPanel, "<html><body><p style='font-size:10px;'>Select business to display!</p></body></html>");
        }
    }//GEN-LAST:event_businessSearchActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        removeAll();//or remove(JComponent)
        revalidate();
        repaint();
        //        initComponents();
    }//GEN-LAST:event_resetButtonActionPerformed
    private ArrayList<String> main_category() throws SQLException {
        ArrayList<String> listModel = new ArrayList<>();
        String sqlQuery = "SELECT distinct c_name FROM b_main_category order by c_name";
        try {
            pst = conn.prepareStatement(sqlQuery);
            rs = pst.executeQuery();
            while (rs.next()) {
                listModel.add(rs.getString("c_name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listModel;
    }

    private ArrayList<String> sub_category(List<String> main_cat, String condition) throws SQLException {
        ArrayList<String> listModel = new ArrayList<>();

        String operation = "";
        int count = 0;
        if (condition.equals("AND")) {
            condition = "INTERSECT";
        } else {
            condition = "UNION";
        }
        String sqlQuery = "";

        for (String mainCat : main_cat) {
            count++;
            if (count == 1) {
                operation = "(SELECT BID FROM B_MAIN_CATEGORY where C_NAME='" + mainCat + "')";
            } else {
                operation = operation + " " + condition + "(SELECT BID FROM B_MAIN_CATEGORY where C_NAME='" + mainCat + "')";
            }
        }
        sqlQuery = "SELECT distinct B_SUB_CATEGORY.C_NAME FROM B_SUB_CATEGORY where BID IN(" + operation + ") order by B_SUB_CATEGORY.C_NAME";
        System.out.println("sub_category()" + sqlQuery);
        pst = conn.prepareStatement(sqlQuery);

        rs = pst.executeQuery();
        while (rs.next()) {
            listModel.add(rs.getString("c_name"));
        }
        return listModel;
    }

    private ArrayList<String> attribute_search(List<String> main_cat, List<String> sub_cat, String condition) throws SQLException {
        ArrayList<String> listModel = new ArrayList<>();
        String operation = "";
        String operation1 = "";
        int count = 0;
        int cnt = 0;
        String sql4 = "";
        if (condition.equals("AND")) {
            condition = "INTERSECT";
        } else {
            condition = "UNION";
        }
        for (String mainCat : main_cat) {
            count++;
            if (count == 1) {
                operation = "(SELECT BID FROM B_MAIN_CATEGORY where C_NAME='" + mainCat + "')";
            } else {
                operation = operation + " " + condition + "(SELECT BID FROM B_MAIN_CATEGORY where C_NAME='" + mainCat + "')";
            }
        }
        for (String subCat : sub_cat) {
            cnt++;
            if (cnt == 1) {
                operation1 = "(SELECT BID FROM B_SUB_CATEGORY where C_NAME='" + subCat + "')";
            } else {
                operation1 = operation1 + " " + condition + "(SELECT BID FROM B_SUB_CATEGORY where C_NAME='" + subCat + "')";
            }
        }

        if (cnt != 0 && count != 0) {
            sql4 = "(" + operation + ")" + " INTERSECT " + "(" + operation1 + ")";
        } else if (count != 0 && cnt == 0) {
            sql4 = "(" + operation + ")";
        } else if (cnt != 0 && count == 0) {
            sql4 = "(" + operation1 + ")";
        }
        String sqlQuery = "SELECT distinct B_ATTRIBUTES.A_NAME FROM B_ATTRIBUTES where BID in(" + sql4 + ") order by B_ATTRIBUTES.A_NAME";
        System.out.println("attribute_search()" + sqlQuery);
        pst = conn.prepareStatement(sqlQuery);
        rs = pst.executeQuery();
        while (rs.next()) {
            listModel.add(rs.getString("a_name"));
        }
        pst.close();
        try {
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            while (rs.next()) {
                businessID.add(rs.getString(1));
            }
            pst.close();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return listModel;
    }

    private ArrayList<String> business_search(List<String> main_cat, List<String> sub_cat, List<String> attr_list, String condition) throws SQLException {
        ArrayList<String> listModel = new ArrayList<>();
        String sqlQuery = "";
        String operation = "", operation1 = "", operation2 = "", opDay = "", sql4 = "";
        int mainCount = 0, subCount = 0, attrCount = 0;
        System.out.println("business_search()" + condition);
        if (condition.equals("AND")) {
            condition = "INTERSECT";
        } else {
            condition = "UNION";
        }
        for (String mainCat : main_cat) {
            mainCount++;
            if (mainCount == 1) {
                operation = "(SELECT BID FROM B_MAIN_CATEGORY where C_NAME='" + mainCat + "')";
            } else {
                operation = operation + " " + condition + "(SELECT BID FROM B_MAIN_CATEGORY where C_NAME='" + mainCat + "')";
            }
        }
        operation = "(" + operation + ")";
        System.out.println("hw3.hw3.business_search()" + operation);
        for (String subCat : sub_cat) {
            subCount++;
            if (subCount == 1) {
                operation1 = "(SELECT BID FROM B_SUB_CATEGORY where C_NAME='" + subCat + "')";
            } else {
                operation1 = operation1 + " " + condition + "(SELECT BID FROM B_SUB_CATEGORY where C_NAME='" + subCat + "')";
            }
        }
        operation1 = "(" + operation1 + ")";
        System.out.println("hw3.hw3.business_search()" + operation1);
        for (String attr : attr_list) {
            attrCount++;
            if (attrCount == 1) {
                operation2 = "(SELECT BID FROM B_ATTRIBUTES WHERE A_NAME='" + attr + "')";
            } else {
                operation2 = operation2 + " " + condition + "(SELECT BID FROM B_ATTRIBUTES WHERE A_NAME='" + attr + "')";
            }
        }
        operation2 = "(" + operation2 + ")";
        System.out.println("hw3.hw3.business_search()" + operation2);

        //main category not selected
        if (mainCount == 0) {
            if (subCount == 0) {//sub category not selected
                if (attrCount == 0) {//attributes not selected
                    sql4 = "(select BID from B_MAIN_CATEGORY) INTERSECT (select BID from B_SUB_CATEGORY) INTERSECT (select BID from B_ATTRIBUTES)";
                } else if (attrCount != 0) {//attributes selected
                    sql4 = operation2;
                }
            } else if (subCount != 0) {//sub category selected
                if (attrCount == 0) {//attributes not selected
                    sql4 = operation1;
                } else if (attrCount != 0) {//attributes selected
                    sql4 = operation1 + " INTERSECT " + operation2;
                }
            }
        } else if (mainCount != 0) {//main category selected
            if (subCount == 0) {//sub category not selected
                if (attrCount == 0) {//attributes not selected
                    sql4 = operation;
                } else if (attrCount != 0) {//attributes selected
                    sql4 = operation + " INTERSECT " + operation2;
                }
            } else if (subCount != 0) {//sub category selected
                if (attrCount == 0) {//attributes not selected
                    sql4 = operation + "INTERSECT" + operation1;
                } else if (attrCount != 0) {//attributes selected
                    sql4 = operation + "INTERSECT" + operation1 + " INTERSECT " + operation2;
                }
            }
        }
        if (dayChoice.getSelectedItem() != "Select") {//day selected
            String day_list = dayChoice.getSelectedItem();
            opDay += "INTERSECT (select BID from B_HOURS where D_O_W='" + day_list + "')";

            if (fromChoice.getSelectedItem() != "Select") {//from selected
                String from_list = fromChoice.getSelectedItem();
                String opFrom = "(select bid from B_HOURS where FROM_H >=" + from_list + ")";
                opDay += " INTERSECT " + opFrom;
                if (toChoice.getSelectedItem() != "Select") {//to selected
                    String to_list = toChoice.getSelectedItem();
                    String opTo = "(select BID from B_HOURS where TO_H<=" + to_list + ")";
                    opDay += " INTERSECT " + opTo;
                }
            } else if (fromChoice.getSelectedItem() == "Select") {//from not selected
                if (toChoice.getSelectedItem() != "Select") {//to selected
                    String to_list = toChoice.getSelectedItem();
                    String opTo = "(select BID from B_HOURS where TO_H<=" + to_list + ")";
                    opDay += " INTERSECT " + opTo;
                }
            }
        } else if (dayChoice.getSelectedItem() == "Select") {//day not selected
            if (fromChoice.getSelectedItem() != "Select") {//from not selected
                String from_list = fromChoice.getSelectedItem();
                String opFrom = "INTERSECT (select bid from B_HOURS where FROM_H >=" + from_list + ")";
                opDay += opFrom;
                if (toChoice.getSelectedItem() != "Select") {// selected
                    String to_list = toChoice.getSelectedItem();
                    String opTo = "(select BID from B_HOURS where TO_H<=" + to_list + ")";
                    opDay += " INTERSECT " + opTo;
                }
            } else if (fromChoice.getSelectedItem() == "Select") {//from selected
                if (toChoice.getSelectedItem() != "Select") {//to not selected
                    String to_list = toChoice.getSelectedItem();
                    String opTo = "INTERSECT (select BID from B_HOURS where TO_H<=" + to_list + ")";
                    opDay += opTo;
                }
            }
        }
        System.out.println("hw3.hw3.business_search() opDay" + opDay);
        System.out.println("hw3.hw3.business_search() sql4" + sql4);
        sqlQuery = "select distinct BUSINESS.B_NAME as Business,BUSINESS.FULL_ADDRESS as Address,BUSINESS.CITY,BUSINESS.STARS,BUSINESS.REVIEW_COUNT,BUSINESS.\"STATE\""
                + "from BUSINESS where BID in(" + sql4 + opDay + ") order by BUSINESS.B_NAME";
        System.out.println("business_search() sqlQuery" + sqlQuery);
        pst = conn.prepareStatement(sqlQuery);
        rs = pst.executeQuery();
        ResultSetMetaData metaData = rs.getMetaData();

        //Names of columns
        Vector<String> colNames = new Vector<>();
        int colCount = metaData.getColumnCount();
        for (int i = 1; i <= colCount; i++) {
            colNames.add(metaData.getColumnName(i));
        }
        int resCount = 0;
        //data of table
        Vector<Vector<Object>> data = new Vector<>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<>();
            for (int i = 1; i <= colCount; i++) {
                vector.add(rs.getObject(i));
            }
            data.add(vector);
            resCount++;
        }
        JOptionPane.showMessageDialog(facetPanel, "Returned " + resCount + " rows");
        tableModel.setDataVector(data, colNames);
        return listModel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new hw3().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice andOrChoice;
    private javax.swing.JLabel attrLabel;
    private javax.swing.JPanel attrPanel;
    private javax.swing.JButton attrSearch;
    private javax.swing.JButton businessSearch;
    private javax.swing.JLabel businessSearchLabel;
    private java.awt.Choice dayChoice;
    private javax.swing.JPanel facetPanel;
    private java.awt.Choice fromChoice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mainCatLabel;
    private javax.swing.JButton mainCatSearch;
    private javax.swing.JLabel mainCatSearchLabel;
    private javax.swing.JLabel resLabel;
    private javax.swing.JPanel resPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel secondPanel;
    private javax.swing.JLabel subCatLabel;
    private javax.swing.JPanel subCatPanel;
    private javax.swing.JButton subCatSearch;
    private javax.swing.JLabel subCatSearchLabel;
    private java.awt.Choice toChoice;
    // End of variables declaration//GEN-END:variables
}
